/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.alexvanyo.composelife.buildlogic.FormFactor
import com.alexvanyo.composelife.buildlogic.configureGradleManagedDevices
import com.android.build.api.variant.HasHostTestsBuilder
import com.android.build.api.variant.HostTestBuilder
import org.gradle.internal.extensions.stdlib.capitalized

plugins {
    alias(libs.plugins.convention.kotlinMultiplatform)
    alias(libs.plugins.convention.androidLibrary)
    alias(libs.plugins.convention.androidLibraryTesting)
    alias(libs.plugins.convention.detekt)
    alias(libs.plugins.gradleDependenciesSorter)
}

android {
    namespace = "com.alexvanyo.composelife.wff.resources"
    defaultConfig {
        minSdk = 33
    }
    configureGradleManagedDevices(setOf(FormFactor.Wear), this)

    compileOptions {
        // This library contains no code, so desugaring isn't needed
        isCoreLibraryDesugaringEnabled = false
    }
    sourceSets {
        getByName("main").res {
            srcDir(layout.buildDirectory.dir("generated/wff/res"))
        }
    }
    lint {
        disable += listOf("IconMissingDensityFolder")
    }
}

androidComponents {
    beforeVariants { variantBuilder ->
        (variantBuilder as HasHostTestsBuilder).hostTests.values.forEach { it.enable = false }
    }
}

kotlin {
    androidTarget()
    jvm()

    sourceSets {
        val jvmTest by getting {
            dependencies {
                implementation(libs.kotlinx.coroutines.test)
                implementation(libs.testParameterInjector.junit4)
                implementation(libs.turbine)

                implementation(projects.algorithm)
                implementation(projects.dispatchersTest)
                implementation(projects.geometry)
            }
        }
    }
}

private val hourPrefixes = listOf(
    "00",
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "_1",
    "_2",
    "_3",
    "_4",
    "_5",
    "_6",
    "_7",
    "_8",
    "_9",
)

androidComponents {
    hourPrefixes.forEach { hourPrefix ->
        val createHourSfd = tasks.register("createHour${hourPrefix}Sfd", CreateHourSfd::class) {
            // Minute sfd files are generated by the jvm tests
            dependsOn("jvmTest")
            minuteSfdInputDirectory = layout.buildDirectory.dir("wff/minuteSfd")
            this.hourPrefix = hourPrefix
            hourSfdOutputPath = "wff/hourSfd"
        }
        val createHourTtf = tasks.register("createHour${hourPrefix}Ttf", ConvertSfdToTtf::class) {
            dependsOn(createHourSfd)
            fontforgeCommand = project.providers.gradleProperty("com.alexvanyo.composelife.fontforgeCommand")
            sfdFile = createHourSfd.flatMap(CreateHourSfd::outputFile)
            ttfFile = layout.buildDirectory.file("generated/wff/res/font/hour$hourPrefix.ttf")
        }
        onVariants { variant ->
            val capitalizedVariantName = variant.name.capitalized()
            tasks.withType<Task>().named {
                it == "generate${capitalizedVariantName}ResValues" ||
                        it == "process${capitalizedVariantName}NavigationResources"
            }.configureEach {
                dependsOn(createHourTtf)
            }
        }
    }
}

tasks.withType<Task>().named { it == "jvmTest" }.configureEach {
    val buildDirectory = layout.buildDirectory
    doFirst { buildDirectory.dir("wff/minuteSfd").get().asFile.mkdirs() }
}

abstract class CreateHourSfd : DefaultTask() {

    @get:InputDirectory
    abstract val minuteSfdInputDirectory: DirectoryProperty

    @get:Input
    abstract val hourPrefix: Property<String>

    @get:Input
    abstract val hourSfdOutputPath: Property<String>

    @get:OutputFile
    val outputFile: Provider<RegularFile> =
        project.layout.buildDirectory.dir(hourSfdOutputPath).flatMap { outputDirectory ->
            hourPrefix.map {
                outputDirectory.file("hour$it.sfd")
            }
        }

    @TaskAction
    fun taskAction() {
        val hourPrefix = hourPrefix.get()
        val hourSfdFile = outputFile.get().asFile
        hourSfdFile.bufferedWriter().use { bufferedWriter ->
            bufferedWriter.write("""
                SplineFontDB: 3.2
                FontName: GameOfLifeHour$hourPrefix
                FullName: GameOfLifeHour$hourPrefix
                FamilyName: GameOfLifeHours
                Weight: Regular
                Copyright: Copyright (c) 2025, Alex Vanyo
                UComments: "2025-5-11: Created with FontForge (http://fontforge.org)"
                Version: 001.000
                ItalicAngle: 0
                UnderlinePosition: -9
                UnderlineWidth: 4
                Ascent: 70
                Descent: 0
                InvalidEm: 0
                LayerCount: 2
                Layer: 0 0 "Back" 1
                Layer: 1 0 "Fore" 0
                XUID: [1021 274 170034612 13146481]
                StyleMap: 0x0000
                FSType: 0
                OS2Version: 0
                OS2_WeightWidthSlopeOnly: 0
                OS2_UseTypoMetrics: 1
                CreationTime: 1747017898
                ModificationTime: 1757554175
                OS2TypoAscent: 0
                OS2TypoAOffset: 1
                OS2TypoDescent: 0
                OS2TypoDOffset: 1
                OS2TypoLinegap: 6
                OS2WinAscent: 0
                OS2WinAOffset: 1
                OS2WinDescent: 0
                OS2WinDOffset: 1
                HheadAscent: 0
                HheadAOffset: 1
                HheadDescent: 0
                HheadDOffset: 1
                OS2Vendor: 'PfEd'
                MarkAttachClasses: 1
                DEI: 91125
                Encoding: Custom
                UnicodeInterp: none
                NameList: AGL For New Fonts
                DisplaySize: -48
                AntiAlias: 1
                FitToEm: 0
                WinInfo: 90 45 17
                BeginPrivate: 0
                EndPrivate
                BeginChars: 18097 18000

            """.trimIndent())
            (0..59).forEach { minute ->
                val minuteFontFile =
                    minuteSfdInputDirectory.file("$hourPrefix:${"%02d".format(minute)}.sfd").get().asFile
                minuteFontFile.bufferedReader().useLines { lines ->
                    lines.forEach { line ->
                        bufferedWriter.write(line)
                        bufferedWriter.newLine()
                    }
                }
            }

            bufferedWriter.write("""
                EndChars
                EndSplineFont
            """.trimIndent())
        }
    }
}

abstract class ConvertSfdToTtf : DefaultTask() {

    @get:InputFile
    abstract val sfdFile: RegularFileProperty

    @get:OutputFile
    abstract val ttfFile: RegularFileProperty

    @get:Inject
    abstract val execOperations: ExecOperations

    @get:Input
    abstract val fontforgeCommand: Property<String>

    @get:OutputFile
    val scriptFile: Provider<RegularFile> =
        ttfFile.flatMap {
            project.layout.buildDirectory.file("tmp/wff/script_${it.asFile.absolutePath.replace("/", "_")}")
        }

    @TaskAction
    fun taskAction() {
        scriptFile.get().asFile.writeText(
            "Open(\"${sfdFile.get().asFile.absolutePath}\");Generate(\"${ttfFile.get().asFile.absolutePath}\");"
        )
        val result = execOperations.exec {
            commandLine(
                fontforgeCommand.get().split(" ") + listOf(
                    "-lang=ff",
                    "-script",
                    scriptFile.get().asFile.absolutePath
                )
            )
        }
        result.rethrowFailure()
    }
}
