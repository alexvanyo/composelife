import com.alexvanyo.composelife.database.CellStateId;
import com.alexvanyo.composelife.database.PatternCollectionId;
import kotlin.Boolean;

CREATE TABLE cellState (
    id INTEGER AS CellStateId NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    description TEXT,
    formatExtension TEXT,
    serializedCellState TEXT,
    serializedCellStateFile TEXT,
    generation INTEGER NOT NULL,
    wasAutosaved INTEGER AS Boolean NOT NULL,
    patternCollectionId INTEGER AS PatternCollectionId,
    CONSTRAINT patternCollection
        FOREIGN KEY(patternCollectionId)
        REFERENCES patternCollection(id)
        ON DELETE CASCADE
);

getCellStates:
SELECT *
FROM cellState;

getCellStateById:
SELECT *
FROM cellState
WHERE id=:id;

getAutosavedCellStates:
SELECT *
FROM cellState
WHERE wasAutosaved=1
ORDER BY id DESC;

getCellStatesByPatternCollectionId:
SELECT *
FROM cellState
WHERE patternCollectionId=:patternCollectionId
ORDER BY id DESC;

getMostRecentAutosavedCellState:
SELECT *
FROM cellState
WHERE wasAutosaved=1
ORDER BY id DESC
LIMIT 1;

insertCellState:
INSERT INTO cellState (
    name,
    description,
    formatExtension,
    serializedCellState,
    serializedCellStateFile,
    generation,
    wasAutosaved,
    patternCollectionId
)
VALUES (
    :name,
    :description,
    :formatExtension,
    :serializedCellState,
    :serializedCellStateFile,
    :generation,
    :wasAutosaved,
    :patternCollectionId
);

updateCellState:
UPDATE cellState
SET
    name=:name,
    description=:description,
    formatExtension=:formatExtension,
    serializedCellState=:serializedCellState,
    serializedCellStateFile=:serializedCellStateFile,
    generation=:generation,
    wasAutosaved=:wasAutosaved,
    patternCollectionId=:patternCollectionId
WHERE id=:id;

lastInsertedRowId:
SELECT last_insert_rowid();

deleteCellState:
DELETE FROM cellState
WHERE id=:id;
